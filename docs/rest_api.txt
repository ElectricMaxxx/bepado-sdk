REST-API Bepado Platform
========================

Some of the SDK calls to bepado can be done without the SDK, using the REST-API.
The SDK has convenience methods for these calls if you are using PHP anyways.

Authentication
--------------

Authentication to the REST API happens via HTTP headers using HMAC-SHA512.
With every request you have to transmit:

    X-Bepado-ShopId: Id
    X-Bepado-Key: HMAC-Key

The shop id can be found in the bepado "Exchange" (Synchronization) tab
in your account. The Key is a computed value using the bepado API Key.

The HMAC Key is generatd using SHA-512 as an algorihtm, the secret is the bepado API Key
and the payload is the JSON formatted body. The PHP code to build the secret is:

    $data = array('pay' => 'load');
    $payload = json_encode($data);
    $key = hash_hmac('sha512', $payload, $apiKey);

Update Order Status
-------------------

As a supplier (Lieferant) I can update the status of a bepado order so that
the dealer (Händler) and end-customer can be informed about changes.

Endpoint: https://sn.bepado.de/sdk/update-order-status
Method: POST
Payload:

- `id` - The order ID of the transaction that was generated by the supplier
- `status` - One of `open`, `in_process`, `delivered`, `canceled` or `error`.
- `tracking` - A structure with keys `id`, `url` and `vendor`. The value is optional

Example:

    POST https://sn.bepado.de/sdk/update-order-status
    X-Bepado-ShopId: 1
    X-Bepado-Key: abcdefg

    {
        "id": "1234",
        "status": "in_process",
        "tracking": {"id": "ABCDEFG1234567890"}
    }

Register Event Hooks
--------------------

bepado provides event hooks for events. Whenever something interesting happens inside bepado
you may opt-in to get notified about these events via Webhook (XML over HTTP POST).

Currently the following events exist:

- `order_created` is triggered when an order was created through bepado. It will be published to both parties (supplier and dealer) when they have a hook registered. The dealer can recieve multiple events for the same order when different suppliers took part in the transaction.

Endpoint: https://sn.bepado.de/sdk/hooks
Method: POST/DELETE
Payload:

- `eventName` - Name of the event to register a hook url to
- `url` - URL where to send the hook to.

Example:

    POST https://sn.bepado.de/sdk/hooks
    X-Bepado-ShopId: 1
    X-Bepado-Key: abcdefg

    {
        "eventName": "order_created",
        "url": "http://example.com/my_hook.php"
    }

Security of hooks: When bepado notifies your url of an event, it uses the X-Bepado-ShopId and X-Bepado-Key headers as well. You can use them to verify
that it was really bepado that sent you the event and not some malicous third party.

Event "order_created"
~~~~~~~~~~~~~~~~~~~~~

When an order is created through bepado with two or more parties you can get notified
of the details of this order with the "order_created" hook. A sample XML request
looks like this:

    <?xml version="1.0" encoding="UTF-8"?>
    <order-event xmlns="http://schema.bepado.de/order+v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://schema.bepado.de/order+v1 https://sn.bepado.de/schema/order_v1.xsd">
     <event>order_created</event>
     <order transaction-id="" transaction-date="2014-05-06 12:15:00" supplier-shop="22" supplier-order-id="200" merchant-shop="20" merchant-order-id="100">
      <shipping-costs net="10" gross="11.9"/>
      <customer-total net="190" gross="214.1"/>
      <intershop-total net="110" gross="124.9"/>
      <delivery-address>
        <company>Acme Corp.</company>
        <name>Max Mustermann</name>
        <first-name>Max</first-name>
        <middle-name/>
        <sur-name>Mustermann</sur-name>
        <street>Neustraße</street>
        <street-number>22</street-number>
        <door-code>a</door-code>
        <additional-address-line>foo</additional-address-line>
        <zip>12345</zip>
        <city>Neustadt</city>
        <country>Germany</country>
      </delivery-address>
      <billing-address>
        <company>Acme Corp.</company>
        <first-name>Max</first-name>
        <sur-name>Mustermann</sur-name>
        <street>Neustraße</street>
        <street-number>12-14a</street-number>
        <door-code/>
        <additional-address-line/>
        <zip>12345</zip>
        <city>Neustadt</city>
        <country>Germany</country>
        <phone>+1234</phone>
        <email>max@mustermann.de</email>
      </billing-address>
      <order-items>
        <item source-id="1" count="1">
          <customer-price net="100" gross="107"/>
          <intershop-price net="50" gross="53.5"/>
        </item>
        <item source-id="2" count="3">
          <customer-price net="90" gross="107.1"/>
          <intershop-price net="60" gross="71.4"/>
        </item>
      </order-items>
     </order>
    </order-event>
